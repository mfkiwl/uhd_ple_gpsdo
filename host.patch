diff --git fpga-src fpga-src
--- fpga-src
+++ fpga-src
@@ -1 +1 @@
-Subproject commit 2e310fae0a6a7354c250fca36060daaeaac1535f
+Subproject commit 2e310fae0a6a7354c250fca36060daaeaac1535f-dirty
diff --git host/lib/usrp/b200/b200_uart.cpp host/lib/usrp/b200/b200_uart.cpp
index 8c8e2462a..debdd4d40 100644
--- host/lib/usrp/b200/b200_uart.cpp
+++ host/lib/usrp/b200/b200_uart.cpp
@@ -23,7 +23,7 @@ struct b200_uart_impl : b200_uart
         _xport(xport),
         _sid(sid),
         _count(0),
-        _baud_div(std::floor(B200_BUS_CLOCK_RATE/115200 + 0.5)),
+        _baud_div(std::floor(B200_BUS_CLOCK_RATE/38400 + 0.5)),
         _line_queue(4096)
     {
         /*NOP*/
diff --git host/lib/usrp/gps_ctrl.cpp host/lib/usrp/gps_ctrl.cpp
index 67803bec6..59e68db6d 100644
--- host/lib/usrp/gps_ctrl.cpp
+++ host/lib/usrp/gps_ctrl.cpp
@@ -138,7 +138,7 @@ private:
 
     const std::list<std::string> keys{"GPGGA", "GPRMC", "SERVO"};
     static const boost::regex servo_regex("^\\d\\d-\\d\\d-\\d\\d.*$");
-    static const boost::regex gp_msg_regex("^\\$GP.*,\\*[0-9A-F]{2}$");
+    static const boost::regex gp_msg_regex("^\\$GP.*\\*[0-9A-F]{2}$");
     std::map<std::string,std::string> msgs;
 
     // Get all GPSDO messages available
@@ -206,7 +206,7 @@ public:
 
     //then we loop until we either timeout, or until we get a response that indicates we're a JL device
     //maximum response time was measured at ~320ms, so we set the timeout at 650ms
-    const boost::system_time comm_timeout = boost::get_system_time() + milliseconds(650);
+    const boost::system_time comm_timeout = boost::get_system_time() + milliseconds(1500);
     while(boost::get_system_time() < comm_timeout) {
       reply = _recv();
       //known devices are JL "FireFly", "GPSTCXO", and "LC_XO"
@@ -406,8 +406,22 @@ private:
   }
 
   std::string _recv(double timeout = GPS_TIMEOUT_DELAY_MS/1000.){
-      return _uart->read_uart(timeout);
-  }
+
+      std::string msg = _uart->read_uart(timeout);
+
+      std::size_t found = msg.find("$GP");
+
+      if(found != std::string::npos)
+      {
+        msg = msg.substr(found);
+      }
+      else
+      {
+        msg.clear();
+      }
+
+      return msg;
+}
 
   void _send(const std::string &buf){
       return _uart->write_uart(buf);
